(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{432:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),s("p",[t._v("首先是我的疑惑，设计响应式系统的目的是什么？出发点是在于，与 dom 更新结合在一起吗？ 比如，dom 中某元素的属性绑定了一个变量值，当该变量值改变时，也应该执行改变这个属性的函数（即副作用函数）\n啊，我悟了，原来 ref、computed、watch 都用到了响应式的概念，即是 effect 方法的延伸。"),s("strong",[t._v("最重要的是更新 DOM")])]),t._v(" "),s("p",[t._v("响应式也可以用发布订阅的思想来看，我们定义的响应式数据就是发布者，与之相关的副作用是订阅者，当数据改变时，要执行相应的作用。")]),t._v(" "),s("h3",{attrs:{id:"实现的基本逻辑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现的基本逻辑"}},[t._v("#")]),t._v(" 实现的基本逻辑")]),t._v(" "),s("p",[t._v("基本思路：利用 Proxy 追踪对象属性的读写，在")]),t._v(" "),s("p",[t._v("// upload test\n以上都是错误的，并不是发布订阅模式，而是"),s("strong",[t._v("观察者模式")]),t._v("。\n观察者模式与发布订阅模式虽然相似，但是还是存在很大的区别，比如发布订阅模式更强调动作（在 emit 这个动作被触发后才会通知订阅者）；\n而观察者模式更强调数据的自动更新，在被观察者的数据更改时，自发地通知观察者。")]),t._v(" "),s("h3",{attrs:{id:"_4-4-分支切换与-cleanup-解决遗留副作用的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-分支切换与-cleanup-解决遗留副作用的问题"}},[t._v("#")]),t._v(" 4.4 分支切换与 cleanup（解决遗留副作用的问题）")]),t._v(" "),s("p",[t._v("**场景：**当副作用函数中涉及到一些分支切换的情况时，或者其他会使某个元素不再使用该副作用的情况，但是如果不清除依赖集中的副作用，下次读写元素属性时还是会调用那个副作用函数\n"),s("strong",[t._v("解决思路：")]),t._v("\n每次副作用函数执行时，先把它从所有与之关联的依赖集合中删除；\n"),s("img",{attrs:{src:t.$withBase("/assets/vue/分支切换.png"),alt:""}})]),t._v(" "),s("p",[t._v("在 effect 函数中，是先读取 ok 的属性，然后再读取 text 的属性，所以大概的流程如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:t.$withBase("/assets/vue/mermaid1.png"),alt:""}})]),t._v(" "),s("p",[t._v("那么怎么做到收集所有与该副作用关联的依赖集合呢？\n也是在 track 函数中收集，为 effect 函数增加一个属性 deps，用于保存与之关联的依赖集，那么为什么在 track 函数里是设置 activeEffect.deps.push(deps)，在 cleanup 里是清除")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在track函数里")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把当前激活的副作用函数添加到依赖集合 deps 中")]),t._v("\n   deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("activeEffect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// deps 就是一个与当前副作用函数存在联系的依赖集合")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将其添加到 activeEffect.deps 数组中")]),t._v("\n   activeEffect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新增")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在cleanup里")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" deps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" effectFn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 effectFn 从依赖集合中移除")]),t._v("\n     deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("effectFn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在effect函数内：")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 effectFn 执行时，将其设置为当前激活的副作用函数")]),t._v("\n             activeEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" effectFn\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("p",[t._v("因为在 effect 函数内，activeEffect = effectFn 是"),s("strong",[t._v("浅拷贝")]),t._v("，修改 activeEffect 也会修改 effectFn，同样的，effectFn.deps 中的依赖集也是浅拷贝了原来的数据集的依赖集，删掉 effectFn.deps 中的依赖集就相当于从原来的依赖集合中删掉对应的依赖集，这样在 trigger 中重新执行时，就不会执行遗留副作用。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("trigger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" depsMap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bucket"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("depsMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" effects "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" depsMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" effectsToRun "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("effects"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新增")]),t._v("\n  effectsToRun"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("effectFn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effectFn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新增")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// effects && effects.forEach(effectFn => effectFn()) // 删除")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);